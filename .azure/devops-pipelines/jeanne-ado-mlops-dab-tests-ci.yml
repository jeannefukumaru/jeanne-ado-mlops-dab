# This Azure Pipeline runs unit and integration tests.
# This pipeline is triggered upon making a PR against the main branch.
# Unit tests are defined under jeanne_ado_mlops_dab/tests
# and are executed on the Azure Pipelines agent.
# The integration test deploys and runs the model_training_job defined in jeanne_ado_mlops_dab/databricks-resource/model-workflow-resource.yml
# This integration test is run in the staging workspace, as defined under jeanne_ado_mlops_dab/bundle.yml

trigger:
  branches:
    include:
      - main

variables:
  - group: jeanne-ado-mlops-dab variable group

jobs:
  - job: UnitTests
    displayName: 'Unit Tests'
    # Trigger unit test upon making a PR against the main branch
    condition: |
      and(
        not(eq(variables['Build.Reason'], 'IndividualCI')),
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')
      )
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.8'
      inputs:
        versionSpec: 3.8

    - script: |
        python -m pip install --upgrade pip
        pip install -r test-requirements.txt
        pip install -r jeanne_ado_mlops_dab/requirements.txt
      displayName: 'Install dependencies'

    - script: |
        pytest --junitxml=test-unit.xml
      displayName: 'Run unit tests with pytest'

  - job: IntegrationTests
    displayName: 'Integration Tests'
    # Integration tests will only run upon unit tests successfully passing
    dependsOn: UnitTests
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-latest' 

    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh   
      displayName: 'Install Databricks CLI'          

    # Extract Databricks version to test installation
    - script: |
        databricks version 
      displayName: 'Get Databricks CLI version'

    # Validate bundle to be deployed to the staging workspace
    - script: |
        databricks bundle validate -e test  
      workingDirectory: jeanne_ado_mlops_dab
      displayName: Validate bundle for test environment in staging workspace 
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)

    # Deploy bundle to staging workspace
    - script: |
        databricks bundle deploy -e test
      workingDirectory: jeanne_ado_mlops_dab
      displayName: Deploy bundle to test environment in staging workspace
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)          

    
    # Run Feature Engineering Workflow for Test Environment in Staging Workspace
    - script: |
        databricks bundle run write_feature_table_job -e test
      workingDirectory: jeanne_ado_mlops_dab
      displayName: Run Feature Engineering Workflow for Test Environment in Staging Workspace
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)         
    
    
    # Run model_training_job defined in bundle in the staging workspace
    - script: |
        databricks bundle run model_training_job -e test
      workingDirectory: jeanne_ado_mlops_dab
      displayName: Run training workflow for test environment in staging workspace
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)          